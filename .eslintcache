[{"C:\\Users\\Eva\\JSProjects\\todo-list\\src\\index.js":"1","C:\\Users\\Eva\\JSProjects\\todo-list\\src\\reportWebVitals.js":"2","C:\\Users\\Eva\\JSProjects\\todo-list\\src\\App.js":"3","C:\\Users\\Eva\\JSProjects\\todo-list\\src\\components\\form.jsx":"4","C:\\Users\\Eva\\JSProjects\\todo-list\\src\\components\\formInput.jsx":"5","C:\\Users\\Eva\\JSProjects\\todo-list\\src\\components\\list.jsx":"6"},{"size":528,"mtime":1609964973138,"results":"7","hashOfConfig":"8"},{"size":362,"mtime":499162500000,"results":"9","hashOfConfig":"8"},{"size":195,"mtime":1609965171190,"results":"10","hashOfConfig":"8"},{"size":2776,"mtime":1609985107634,"results":"11","hashOfConfig":"8"},{"size":2100,"mtime":1609982429346,"results":"12","hashOfConfig":"8"},{"size":4728,"mtime":1609985107652,"results":"13","hashOfConfig":"8"},{"filePath":"14","messages":"15","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"16"},"w5ygca",{"filePath":"17","messages":"18","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"16"},{"filePath":"19","messages":"20","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"16"},{"filePath":"21","messages":"22","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"23","messages":"24","errorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"25","usedDeprecatedRules":"16"},{"filePath":"26","messages":"27","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},"C:\\Users\\Eva\\JSProjects\\todo-list\\src\\index.js",[],["28","29"],"C:\\Users\\Eva\\JSProjects\\todo-list\\src\\reportWebVitals.js",[],"C:\\Users\\Eva\\JSProjects\\todo-list\\src\\App.js",[],"C:\\Users\\Eva\\JSProjects\\todo-list\\src\\components\\form.jsx",[],"C:\\Users\\Eva\\JSProjects\\todo-list\\src\\components\\formInput.jsx",["30","31","32"],"import  React, { useState, useEffect, useRef } from 'react';\r\nimport Button from \"@material-ui/core/Button\";\r\nimport { makeStyles, createMuiTheme, ThemeProvider } from '@material-ui/core/styles';\r\nimport TextField from \"@material-ui/core/TextField\";\r\nimport FormHelperText from '@material-ui/core/FormHelperText';\r\nimport FormControl from '@material-ui/core/FormControl';\r\n\r\nconst useStyles = makeStyles({\r\n    root: {\r\n        background: 'linear-gradient(45deg, gray 30%, black 90%)',\r\n        border: 0,\r\n        borderRadius: 3,\r\n        color: 'white',\r\n        height: 55,\r\n        padding: '0 30px',\r\n        whiteSpace: 'nowrap'\r\n    },\r\n    mainInput: {\r\n        width: '90%'\r\n    },\r\n    label: {\r\n        width: '100%'\r\n    }\r\n});\r\n\r\nconst theme = createMuiTheme({\r\n    palette: {\r\n        primary: { main: '#000000' }\r\n    }\r\n});\r\n\r\n\r\nconst TodoCreator = ({ todos }) => {\r\n    const classes = useStyles();\r\n    const [ newTodo, setNewTodo ] = useState('');\r\n    const [ isInputEmpty, setInputEmpty ] = useState(false);\r\n    const inputRef = useRef();\r\n\r\n\r\n    const handleSubmit = (e) => {\r\n        e.preventDefault();\r\n        addTodo(newTodo);\r\n        clearInput();\r\n        inputRef.current.focus();\r\n    }\r\n\r\n    const addTodo = text => {\r\n        if ( text !== '') {\r\n            const newTodos = [...todos, { text }]\r\n            setNewTodo('')\r\n            setTodos(newTodos);\r\n        } else {\r\n            setInputEmpty(true);\r\n        }\r\n    };\r\n\r\n    const clearInput = () => {\r\n        setNewTodo('');\r\n    }\r\n\r\n    const setTodo = todo => {\r\n        setInputEmpty(false);\r\n        setNewTodo(todo);\r\n    }\r\n\r\n    return (\r\n        <div className=\"form__input\">\r\n            <ThemeProvider theme={theme}>\r\n                <FormControl   className={classes.label}>\r\n                    <TextField\r\n                        id=\"outlined-basic\"\r\n                        label=\"What's need to be done?\"\r\n                        value={newTodo}\r\n                        variant=\"outlined\"\r\n                        onChange={(e) => setTodo(e.target.value)}\r\n                        onFocus={clearInput}\r\n                        ref={inputRef}\r\n                        className={classes.mainInput}\r\n                        aria-describedby=\"component-error-text\"\r\n                    />\r\n\r\n                    { !isInputEmpty ?\r\n                        <></>\r\n                        :\r\n                        <>\r\n                            <FormHelperText id=\"component-error-text\">Task can't be empty</FormHelperText>\r\n                        </>\r\n                    }\r\n                </FormControl>\r\n            </ThemeProvider>\r\n            <Button type=\"submit\" alt=\"add-note\" className={classes.root}>Add task</Button>\r\n        </div>\r\n    )\r\n\r\n}\r\n\r\nexport  default TodoCreator;","C:\\Users\\Eva\\JSProjects\\todo-list\\src\\components\\list.jsx",[],{"ruleId":"33","replacedBy":"34"},{"ruleId":"35","replacedBy":"36"},{"ruleId":"37","severity":1,"message":"38","line":1,"column":18,"nodeType":"39","messageId":"40","endLine":1,"endColumn":26},{"ruleId":"37","severity":1,"message":"41","line":1,"column":28,"nodeType":"39","messageId":"40","endLine":1,"endColumn":37},{"ruleId":"37","severity":1,"message":"42","line":1,"column":39,"nodeType":"39","messageId":"40","endLine":1,"endColumn":45},"no-native-reassign",["43"],"no-negated-in-lhs",["44"],"no-unused-vars","'useState' is defined but never used.","Identifier","unusedVar","'useEffect' is defined but never used.","'useRef' is defined but never used.","no-global-assign","no-unsafe-negation"]