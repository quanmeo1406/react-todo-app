[{"C:\\Users\\Eva\\JSProjects\\todo-list\\src\\index.js":"1","C:\\Users\\Eva\\JSProjects\\todo-list\\src\\reportWebVitals.js":"2","C:\\Users\\Eva\\JSProjects\\todo-list\\src\\App.js":"3","C:\\Users\\Eva\\JSProjects\\todo-list\\src\\components\\form.jsx":"4","C:\\Users\\Eva\\JSProjects\\todo-list\\src\\components\\form2.jsx":"5"},{"size":500,"mtime":499162500000,"results":"6","hashOfConfig":"7"},{"size":362,"mtime":499162500000,"results":"8","hashOfConfig":"7"},{"size":256,"mtime":1609796549766,"results":"9","hashOfConfig":"7"},{"size":3803,"mtime":1609791192031,"results":"10","hashOfConfig":"7"},{"size":4613,"mtime":1609802903567,"results":"11","hashOfConfig":"7"},{"filePath":"12","messages":"13","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"14"},"w5ygca",{"filePath":"15","messages":"16","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"14"},{"filePath":"17","messages":"18","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"19","messages":"20","errorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"21","usedDeprecatedRules":"14"},{"filePath":"22","messages":"23","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},"C:\\Users\\Eva\\JSProjects\\todo-list\\src\\index.js",[],["24","25"],"C:\\Users\\Eva\\JSProjects\\todo-list\\src\\reportWebVitals.js",[],"C:\\Users\\Eva\\JSProjects\\todo-list\\src\\App.js",["26"],"C:\\Users\\Eva\\JSProjects\\todo-list\\src\\components\\form.jsx",["27","28","29"],"import  React, { useState, useEffect, useRef } from 'react';\r\n\r\nconst Form = () => {\r\n    let UniqKey = 192;\r\n\r\n    const [ UniqueId, setUniqueId ] = useState(123)\r\n    const [ newTodo, addNewTodo ] = useState({id: 1, text: 'new task', isEditing: false});\r\n    const [ todos, setTodos ] = useState([])\r\n    const inputRef = useRef();\r\n    // const todoRef = useRef();\r\n    // const [isEditing, setEditing] = useState(false);\r\n    // const [ note, setNote ] = useState()\r\n    //\r\n    // const toggleEditing = (todoRef) => {\r\n    //     setEditing(!isEditing);\r\n    //     // if(!isEditing) {\r\n    //     //             todoRef.current.focus();\r\n    //     //         }\r\n    // };\r\n\r\n    const handleSubmit = (e) => {\r\n        e.preventDefault();\r\n        setTodos([...todos, newTodo]);\r\n        inputRef.current.value = '';\r\n    };\r\n\r\n    const removeTodo = index => {\r\n        const newTodos = [...todos];\r\n        newTodos.splice(index, 1);\r\n        setTodos(newTodos);\r\n    };\r\n\r\n    // const deleteTodo = (inx) => {\r\n    //\r\n    //     // console.log('id', deleteTodoId)\r\n    //     console.log('todos', todos)\r\n    //     // // todos.forEach((el) => console.log(el.id))\r\n    //     // const newArr = todos.filter((el) => el.id !== deleteTodoId)\r\n    //\r\n    //     // setTodos(newArr);\r\n    //     // const indx = todos.findIndex((el) => el.id === deleteTodoId);\r\n    //     // console.log('indx', indx)\r\n    //     // console.log('deleteTodoId', deleteTodoId)\r\n    //     // // const newArr = todos.filter((indx) => indx !== deleteTodoId)\r\n    //     // let copy = [...todos]\r\n    //     // const newArr = [\r\n    //     //     ...copy.slice( 0, indx ),\r\n    //     //     ...copy.slice( indx +1)\r\n    //     // ];\r\n    //\r\n    //     // console.log('todos', todos)\r\n    //     const newArr = todos.slice();\r\n    //     newArr.splice(inx, 1)\r\n    //     console.log('newArr', newArr)\r\n    //     return setTodos(newArr);\r\n    // };\r\n\r\n    // const  handleInputChange = (e) => {\r\n    //     setNote(e.target.value);\r\n    // };\r\n    //\r\n    // useEffect(() => {\r\n    //     inputRef.current.focus();\r\n    //     // deleteTodo()\r\n    //     // UniqueId++;\r\n    // }, [newTodo, todos]);\r\n\r\n    // useEffect((todoRef) => {\r\n    //     if(!isEditing) {\r\n    //         todoRef.current.focus();\r\n    //     }\r\n    // }, [!isEditing])\r\n\r\n    return (\r\n       <>\r\n           <form onSubmit={(e) => handleSubmit(e)}>\r\n               <input\r\n                   defaultValue={newTodo.text}\r\n                   onChange={(e) => addNewTodo({...newTodo, text: e.target.value, id: todos.length + 1})}\r\n                   ref={inputRef}\r\n               />\r\n               <button type=\"submit\" alt=\"add-note\">Add</button>\r\n               <div className=\"notes\">----------------------------------------\r\n                   <ul>\r\n                       {todos.map((newTodo, inx) => {\r\n                           return(\r\n                               <li key={UniqKey++}>\r\n                                   <input\r\n                                       type=\"string\"\r\n                                       defaultValue={newTodo.text}\r\n                                       // ref={todoRef}\r\n                                       // onChange={(e) => setNote(e.target.value)}\r\n                                       // onBlur={(e) => handleInputChange(e)}\r\n                                   />\r\n\r\n                                   {/*<button type=\"button\" onClick={(newTodo) => toggleEditing(newTodo)}>edit</button>*/}\r\n                                   <button type=\"button\" onClick={() => removeTodo(inx)}>delete</button>\r\n                               </li>\r\n                           )})}\r\n                   </ul>\r\n               </div>\r\n\r\n           </form>\r\n       </>\r\n    )\r\n}\r\n\r\nexport default Form;","C:\\Users\\Eva\\JSProjects\\todo-list\\src\\components\\form2.jsx",["30"],{"ruleId":"31","replacedBy":"32"},{"ruleId":"33","replacedBy":"34"},{"ruleId":"35","severity":1,"message":"36","line":2,"column":8,"nodeType":"37","messageId":"38","endLine":2,"endColumn":12},{"ruleId":"35","severity":1,"message":"39","line":1,"column":28,"nodeType":"37","messageId":"38","endLine":1,"endColumn":37},{"ruleId":"35","severity":1,"message":"40","line":6,"column":13,"nodeType":"37","messageId":"38","endLine":6,"endColumn":21},{"ruleId":"35","severity":1,"message":"41","line":6,"column":23,"nodeType":"37","messageId":"38","endLine":6,"endColumn":34},{"ruleId":"35","severity":1,"message":"39","line":1,"column":28,"nodeType":"37","messageId":"38","endLine":1,"endColumn":37},"no-native-reassign",["42"],"no-negated-in-lhs",["43"],"no-unused-vars","'Form' is defined but never used.","Identifier","unusedVar","'useEffect' is defined but never used.","'UniqueId' is assigned a value but never used.","'setUniqueId' is assigned a value but never used.","no-global-assign","no-unsafe-negation"]